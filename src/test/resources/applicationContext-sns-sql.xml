<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:util="http://www.springframework.org/schema/util"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
                http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd">

    <util:properties id="snsSqlProp">
        <prop key="memberOverdue">
            <![CDATA[SELECT BORROWER_ID FROM memedai.LOANS WHERE CREDIT_DATE IS NOT NULL GROUP BY BORROWER_ID HAVING max(OVERDUE_DAYS) > 3 limit ?,?]]>
        </prop>
        <prop key="member">
            <![CDATA[SELECT a.MEMBER_ID,a.MOBILE_NO,b.`NAME`,b.ID_NO,c.PROVINCE,c.CITY FROM memedai.MEMBER a LEFT JOIN memedai.ID_CARD b ON a.MEMBER_ID = b.MEMBER_ID LEFT JOIN credit_audit.ca_sys_value_id_area c ON left(b.id_no,6) = c.id_prefix WHERE 	a.MOBILE_NO IS NOT NULL limit ?,?]]>
        </prop>

        <prop key="memberIncrementPrefix">
        </prop>

        <prop key="memberIncrement">
            <![CDATA[SELECT a.MEMBER_ID,a.MOBILE_NO,b.`NAME`,b.ID_NO,c.PROVINCE,c.CITY FROM memedai.MEMBER a LEFT JOIN memedai.ID_CARD b ON a.MEMBER_ID = b.MEMBER_ID LEFT JOIN credit_audit.ca_sys_value_id_area c ON left(b.id_no,6) = c.id_prefix WHERE a.MOBILE_NO IS NOT NULL ]]>
        </prop>

        <prop key="memberIncrementSuffix">
            <![CDATA[  limit ?,?]]>
        </prop>

        <prop key="store">
            <![CDATA[SELECT a.STOREID,a.MERCHANTID,a.STORENAME,a.PROVINCE,a.CITY,a.CREDIT_LIMIT_TYPE,b.POLICY_BRACKET,b.BUSINESS_FIRST_TYPE FROM MERCHANTAUDIT.ma_store_baseinfo AS a LEFT JOIN MERCHANTAUDIT.ma_execution_strategy AS b ON a.storeid = b.storeid limit ?,?]]>
        </prop>

        <prop key="apply">
            <![CDATA[SELECT cellphone,member_id,apply_no,created_datetime,apply_status as original_status,case when apply_status=4000 then 1 when left(apply_status,2)=30 then 0 else null end as status,store_id,order_no FROM network.apply_info]]>
        </prop>

        <prop key="order">
            <![CDATA[SELECT mobile,member_id,order_no,created_datetime, case when status in ('1051','1081','1085')  then 1 WHEN status in ('1011','1012') then null else 0 end as status,status as original_status,store_id,pay_amount/100 as pay_amount from network.money_box_order]]>
        </prop>

        <prop key="deviceAndIp1">
            <![CDATA[SELECT APPL_NO,DEVICE_ID,IP,IP_CITY FROM memedai.A_APPL where device_id is not null or ip is not null  limit ?,?]]>
        </prop>

        <prop key="device2Ca">
            <![CDATA[SELECT APPL_NO,DEVICE_ID FROM network.ca_appl_member_device where DEVICE_ID is not null]]>
        </prop>

        <prop key="ip2Ca">
            <![CDATA[SELECT APPL_NO,IP,IP_CITY  FROM network.ca_appl_member_device where IP is not null]]>
        </prop>

        <prop key="device2Cta">
            <![CDATA[SELECT ORDER_ID,DEVICE_ID from network.cta_order_deviceinfo where device_id is not null]]>
        </prop>

        <prop key="ip2Cta">
            <![CDATA[SELECT ORDER_ID,IP,IP_CITY from network.cta_order_deviceinfo where ip is not null]]>
        </prop>

        <prop key="phoneWithPhoneMarkAndPhoneSource">
            <![CDATA[SELECT PHONE_NO, PHONE_TYPE,SOURCE  FROM network.ca_sys_phone_tag_merge where PHONE_NO is not null]]>
        </prop>

        <prop key="phoneWithCallTo2">
            <![CDATA[select APPL_NO,PHONE_NO,CALL_CNT,CALL_LEN,CALL_IN_CNT,CALL_OUT_CNT,CREATE_TIME from network.ca_bur_operator_contact where PHONE_NO is not null ]]>
        </prop>

        <prop key="phoneWithCallToCache01">
            <![CDATA[SELECT cellphone,apply_no FROM network.apply_info limit ?,?]]>
        </prop>

        <prop key="phoneWithCallToCache02">
            <![CDATA[SELECT REPORTNO, APPL_NO FROM mis_watson.D_JXL_PERSON limit ?,?]]>
        </prop>

        <prop key="phonesWithMoreCellphones">
            <![CDATA[select cellphone from network.apply_info group by cellphone HAVING count(1)>1 limit ?,?]]>
        </prop>

        <prop key="maxIdForCallTo2">
            <![CDATA[select max(ID) from network.ca_bur_operator_contact]]>
        </prop>

    </util:properties>

    <util:properties id="snsOrientSqlProp">
        <prop key="updateMemberOverdueToTrue">
            <![CDATA[update Member set isOverdue=true where memberId=?]]>
        </prop>

        <prop key="updateMemberOverdueToFalse">
            <![CDATA[update Member set isOverdue=false where isOverdue=true]]>
        </prop>

        <prop key="member">
            <![CDATA[update Member set memberId=?,name=?,idNo=?,province=?,city=?,phone=?,isBlack=false,isOverdue=false upsert return after where memberId=?]]>
        </prop>

        <prop key="store">
            <![CDATA[update Store set storeId=?,merchantId=?,storeName=?,province=?,city=?,creditLimitType=?,policyBracket=?,businessFirstType=? upsert return after where storeId = ?]]>
        </prop>

        <prop key="apply">
            <![CDATA[update Apply set applyNo=?,status=?,originalStatus=?,createdDatetime=? upsert return after where applyNo=?]]>
        </prop>

        <prop key="order">
            <![CDATA[update Order set orderNo=?,status=?,originalStatus=?,amount=?,createdDatetime=? upsert return after where orderNo=?]]>
        </prop>

        <prop key="deleteEdge">
            <![CDATA[delete edge {0}]]>
        </prop>

        <prop key="selectDuplicatedCallTo">
            <![CDATA[select expand($c) from (select from V limit 1) let $a = (select expand(in_CallTo) from Phone where phone = ?), $b = (select expand(out_CallTo) from Phone where phone = ?), $c = unionall($a,$b)]]>
        </prop>

        <prop key="updateDevice">
            <![CDATA[update Device set deviceId=? upsert return after where deviceId=?]]>
        </prop>

        <prop key="updateIp">
            <![CDATA[update Ip set ip=?,ipCity=? upsert return after where ip=?]]>
        </prop>

        <prop key="updatePhone">
            <![CDATA[update Phone set phone=? upsert return after where phone=?]]>
        </prop>

        <prop key="selectStore">
            <![CDATA[select from Store where storeId=?]]>
        </prop>

        <prop key="selectMember">
            <![CDATA[select from Member where memberId = ?]]>
        </prop>

        <prop key="updatePhoneMark">
            <![CDATA[update PhoneMark set mark=? upsert return after where mark=?]]>
        </prop>

        <prop key="createHasPhoneMark">
            <![CDATA[create edge HasPhoneMark from {0} to {1}]]>
        </prop>

        <prop key="updatePhoneSource">
            <![CDATA[update PhoneSource set source=? upsert return after where source=?]]>
        </prop>

        <prop key="createHasPhoneSource">
            <![CDATA[create edge HasPhoneSource from {0} to {1}]]>
        </prop>

        <prop key="selectAllDevice">
            <![CDATA[select from Device]]>
        </prop>

        <prop key="selectAllIp">
            <![CDATA[select from Ip]]>
        </prop>

        <prop key="createMemberHasApply">
            <![CDATA[create edge MemberHasApply from {0} to {1}]]>
        </prop>

        <prop key="createPhoneHasApply">
            <![CDATA[create edge PhoneHasApply from {0} to {1}]]>
        </prop>

        <prop key="createApplyHasDevice">
            <![CDATA[create edge ApplyHasDevice from {0} to {1}]]>
        </prop>

        <prop key="createOrderHasDevice">
            <![CDATA[create edge OrderHasDevice from {0} to {1}]]>
        </prop>

        <prop key="createMemberHasDevice">
            <![CDATA[create edge MemberHasDevice from {0} to {1}]]>
        </prop>

        <prop key="createApplyHasIp">
            <![CDATA[create edge ApplyHasIp from {0} to {1}]]>
        </prop>

        <prop key="createOrderHasIp">
            <![CDATA[create edge OrderHasIp from {0} to {1}]]>
        </prop>

        <prop key="createMemberHasIp">
            <![CDATA[create edge MemberHasIp from {0} to {1}]]>
        </prop>

        <prop key="createApplyHasOrder">
            <![CDATA[create edge ApplyHasOrder from {0} to {1}]]>
        </prop>

        <prop key="createPhoneHasOrder">
            <![CDATA[create edge PhoneHasOrder from {0} to {1}]]>
        </prop>

        <prop key="createMemberHasOrder">
            <![CDATA[create edge MemberHasOrder from {0} to {1}]]>
        </prop>

        <prop key="createHasPhone">
            <![CDATA[create edge HasPhone from {0} to {1}]]>
        </prop>

        <prop key="createApplyHasStore">
            <![CDATA[create edge ApplyHasStore from {0} to {1}]]>
        </prop>

        <prop key="createOrderHasStore">
            <![CDATA[create edge OrderHasStore from {0} to {1}]]>
        </prop>

        <prop key="createCallTo">
            <![CDATA[create edge CallTo from {0} to {1} set callCnt = ?,callLen=?,callInCnt=?,callOutCnt=?,reportTime=?]]>
        </prop>

        <prop key="createCallTo2">
            <![CDATA[create edge CallTo from {0} to {1} set callCnt = #callCnt,callLen=#callLen,callInCnt=#callInCnt,callOutCnt=#callOutCnt,reportTime=#reportTime retry 100 wait 100]]>
        </prop>

        <prop key="updateCallTo">
            <![CDATA[update edge {0} set callCnt = ?,callLen=?,callInCnt=?,callOutCnt=?,reportTime=?]]>
        </prop>

        <prop key="selectCallTo">
            <![CDATA[select from (select expand(out_CallTo) from {0}) where in = {1}]]>
        </prop>

        <prop key="createHasPhone">
            <![CDATA[create edge HasPhone from {0} to {1}]]>
        </prop>

    </util:properties>


</beans>